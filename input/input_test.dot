digraph prooftreeDot {
"( A1  ->  A2 )" -> "(( A1  ->  A2 ) -> (( A1  -> ( A2  ->  A3 )) -> (( A2  -> ( A3  ->  A4 )) -> (( A3  -> ( A4  ->  A5 )) -> (( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 )))))))" [color=green];
"(( A1  ->  A2 ) -> (( A1  -> ( A2  ->  A3 )) -> (( A2  -> ( A3  ->  A4 )) -> (( A3  -> ( A4  ->  A5 )) -> (( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 )))))))" -> "(( A1  -> ( A2  ->  A3 )) -> (( A2  -> ( A3  ->  A4 )) -> (( A3  -> ( A4  ->  A5 )) -> (( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 ))))))";
"( A1  -> ( A2  ->  A3 ))" -> "(( A1  -> ( A2  ->  A3 )) -> (( A2  -> ( A3  ->  A4 )) -> (( A3  -> ( A4  ->  A5 )) -> (( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 ))))))" [color=green];
"(( A1  -> ( A2  ->  A3 )) -> (( A2  -> ( A3  ->  A4 )) -> (( A3  -> ( A4  ->  A5 )) -> (( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 ))))))" -> "(( A2  -> ( A3  ->  A4 )) -> (( A3  -> ( A4  ->  A5 )) -> (( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 )))))";
"( A2  -> ( A3  ->  A4 ))" -> "(( A2  -> ( A3  ->  A4 )) -> (( A3  -> ( A4  ->  A5 )) -> (( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 )))))" [color=green];
"(( A2  -> ( A3  ->  A4 )) -> (( A3  -> ( A4  ->  A5 )) -> (( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 )))))" -> "(( A3  -> ( A4  ->  A5 )) -> (( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 ))))";
"( A3  -> ( A4  ->  A5 ))" -> "(( A3  -> ( A4  ->  A5 )) -> (( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 ))))" [color=green];
"(( A3  -> ( A4  ->  A5 )) -> (( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 ))))" -> "(( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 )))";
"( A4  -> ( A5  ->  A6 ))" -> "(( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 )))" [color=green];
"(( A4  -> ( A5  ->  A6 )) -> (( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 )))" -> "(( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 ))";
"( A5  -> ( A6  ->  A7 ))" -> "(( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 ))" [color=green];
"(( A5  -> ( A6  ->  A7 )) -> ( A1  ->  A7 ))" -> "( A1  ->  A7 )";
" A1 " -> "( A1  ->  A7 )" [color=green];
"( A1  ->  A7 )" -> " A7 ";
" A7 " -> " A6 ";
" A7 " -> "( A6  ->  A7 )";
" A6 " -> " A5 ";
" A6 " -> "( A5  ->  A6 )";
" A5 " -> " A4 ";
" A5 " -> "( A4  ->  A5 )";
" A4 " -> " A3 ";
" A4 " -> "( A3  ->  A4 )";
" A3 " -> " A2 ";
" A3 " -> "( A2  ->  A3 )";
" A2 " -> " A1 ";
" A2 " -> "( A1  ->  A2 )";
"( A2  ->  A3 )" -> " A1   1";
"( A2  ->  A3 )" -> "( A1  -> ( A2  ->  A3 ))";
"( A3  ->  A4 )" -> " A2   1";
"( A3  ->  A4 )" -> "( A2  -> ( A3  ->  A4 ))";
" A2   1" -> " A1   2";
" A2   1" -> "( A1  ->  A2 )  1";
"( A4  ->  A5 )" -> " A3   1";
"( A4  ->  A5 )" -> "( A3  -> ( A4  ->  A5 ))";
" A3   1" -> " A2   2";
" A3   1" -> "( A2  ->  A3 )  1";
" A2   2" -> " A1   3";
" A2   2" -> "( A1  ->  A2 )  2";
"( A2  ->  A3 )  1" -> " A1   4";
"( A2  ->  A3 )  1" -> "( A1  -> ( A2  ->  A3 ))  1";
"( A5  ->  A6 )" -> " A4   1";
"( A5  ->  A6 )" -> "( A4  -> ( A5  ->  A6 ))";
" A4   1" -> " A3   2";
" A4   1" -> "( A3  ->  A4 )  1";
" A3   2" -> " A2   3";
" A3   2" -> "( A2  ->  A3 )  2";
" A2   3" -> " A1   5";
" A2   3" -> "( A1  ->  A2 )  3";
"( A2  ->  A3 )  2" -> " A1   6";
"( A2  ->  A3 )  2" -> "( A1  -> ( A2  ->  A3 ))  2";
"( A3  ->  A4 )  1" -> " A2   4";
"( A3  ->  A4 )  1" -> "( A2  -> ( A3  ->  A4 ))  1";
" A2   4" -> " A1   7";
" A2   4" -> "( A1  ->  A2 )  4";
"( A6  ->  A7 )" -> " A5   1";
"( A6  ->  A7 )" -> "( A5  -> ( A6  ->  A7 ))";
" A5   1" -> " A4   2";
" A5   1" -> "( A4  ->  A5 )  1";
" A4   2" -> " A3   3";
" A4   2" -> "( A3  ->  A4 )  2";
" A3   3" -> " A2   5";
" A3   3" -> "( A2  ->  A3 )  3";
" A2   5" -> " A1   8";
" A2   5" -> "( A1  ->  A2 )  5";
"( A2  ->  A3 )  3" -> " A1   9";
"( A2  ->  A3 )  3" -> "( A1  -> ( A2  ->  A3 ))  3";
"( A3  ->  A4 )  2" -> " A2   6";
"( A3  ->  A4 )  2" -> "( A2  -> ( A3  ->  A4 ))  2";
" A2   6" -> " A1   10";
" A2   6" -> "( A1  ->  A2 )  6";
"( A4  ->  A5 )  1" -> " A3   4";
"( A4  ->  A5 )  1" -> "( A3  -> ( A4  ->  A5 ))  1";
" A3   4" -> " A2   7";
" A3   4" -> "( A2  ->  A3 )  4";
" A2   7" -> " A1   11";
" A2   7" -> "( A1  ->  A2 )  7";
"( A2  ->  A3 )  4" -> " A1   12";
"( A2  ->  A3 )  4" -> "( A1  -> ( A2  ->  A3 ))  4";
}